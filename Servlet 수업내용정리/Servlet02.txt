0. tomcat -> webapp -> helloweb -> WEB -INF
		          |		|
		      hello.jsp      web.xml
			         classes -> com -> bitacademy -> helloweb -> servlet -> HelloServlet.class
			         libs	




1. 인터넷(네트워크 통신)중 HTTP 프로토콜 이해
1) 요청헤더 -> 요청바디 -> 2) 응답헤더 -> 응답바디 -> 3) 연결을끊음 (무상태연결)

"바디에 HTML을 짜는것이 웹 프로그래머가 할 일이다."

HTTP는 문서 중심의 프로토콜이기 때문에 효율적인 통신을 위해 문서를 다 읽었다면 연결을 끊음
"로그인은 어떻게 유지가 될까??"




2. 요청헤더에 요청하는 방식
1) GET방식
www.example-url.com/resources?name1=value1&name2=value2

GET은 요청을 전송할 때 필요한 데이터를 Body에 담지 않고, 쿼리스트링을 통해 전송한다. (URL의 끝에 ?와 함께 이름과 값으로 쌍을 이루는 요청 파라미터를 쿼리스트링이라고 부른다.)
만약, 요청 파라미터가 여러 개이면 &로 연결한다.
쿼리스트링을 사용하게 되면 URL에 조회 조건을 표시하기 때문에 특정 페이지를 링크하거나 북마크할 수 있다.
여기서 요청 파라미터명은 name1, name2이고
각각의 파라미터는 value1, value2라는 값으로 서버에 요청을 보내게 된다.
GET 요청은 중요한 정보를 다루면 안됨 (보안)


2) POST방식
POST는 리소스를 생성/변경하기 위해 설계되었기 때문에
GET과 달리 전송해야될 데이터를 HTTP 메세지의 Body에 담아서 전송합니다.
HTTP 메세지의 Body는 길이의 제한없이 데이터를 전송할 수 있습니다.
그래서 POST 요청은 GET과 달리 대용량 데이터를 전송할 수 있습니다.
이처럼 POST는 데이터가 Body로 전송되고 내용이 눈에 보이지 않아
GET보다 보안적인 면에서 안전하다고 생각할 수 있지만
POST 요청도 크롬 개발자 도구, Fiddler와 같은 툴로 요청 내용을 확인할 수 있기 때문에 민감한 데이터의 경우에는 반드시 암호화해 전송해야 합니다.
POST로 요청을 보낼 때는 응답헤더의 Content-Type에 응답 데이터의 타입을 표시해야 합니다.


3) GET과 POST의 차이점
- 사용목적 : GET은 서버의 리소스에서 데이터를 요청할 때,
POST는 서버의 리소스를 새로 생성하거나 업데이트할 때 사용한다.

"DB로 따지면 GET은 SELECT 에 가깝고, POST는 Create 에 가깝다고 보면 된다."

- 요청에 body 유무 :  GET 은 URL 파라미터에 요청하는 데이터를 담아 보내기 때문에 HTTP 메시지에 body가 없다.
POST 는 body 에 데이터를 담아 보내기 때문에 당연히 HTTP 메시지에 body가 존재한다.

- 멱등성 (idempotent) : GET 요청은 멱등이며, POST는 멱등이 아니다.
멱등이란?
연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 의미한다.
GET은 리소스를 조회한다는 점에서 여러 번 요청하더라도 응답이 똑같을 것 이다.
반대로 POST는 리소스를 새로 생성하거나 업데이트할 때 사용되기 때문에 멱등이 아니라고 볼 수 있다.
(POST 요청이 발생하면 서버가 변경될 수 있다.)




3. URL
특정 웹 서버의 특정파일에 접근하기위한 주소
"이클립스에서 HelloWorld.java가 어디 폴더에 있는지...??" 와 비슷한 느낌

http://localhost:8080/helloweb/hello.jsp   <<<   8080 뒤부터가 URL

우리가 maven project을 helloweb이라는 이름으로 만들고 톰캣을 설치해주면
project explorer에는 안보이는 helloweb.war가 생기고 그 안에
helloweb/webapp가 자동생성됨
그러므로 hello.jsp를 읽으려면 helloweb/hello.jsp으로 입력해야됨 




4. JSP와 HTML의 차이
HTML파일은 클라이언트의 브라우저에 의해서 내용을 해석하여 실행하므로 톰캣서버가 설치되어있지않아도 실행가능
JSP파일은 톰캣 서버가 번역하여 그 결과를 HTML 태그로 변환한 후 웹브라우저에 내려 보냄

HTML은 변화가 없는 단순 상수값을 출력,
JSP는 서버 측에서 동작해야 할 코드들이 있을 경우사용 (서버에서 보낸 데이터에 따라 값이 바뀔 수 있는 변수에 저장된 내용들을 출력)

"자바 웹 프로그램은 모든 것이 servlet 클래스로 이루어진 집합체임"
(HTML이 포함되어있는건 단순상수값의 개념이라 상관없음)

"정적인 웹 문서(HTML)를 만드는 것은 웹 프로그래밍이라고 하지 않는다. 퍼블리셔 라고 한다."




5. JSP와 Servlet의 차이
"기능의 차이는 없고 역할의 차이만 있다"
JSP는 HTML이 주로 쓰이고 <% %>를 통해 부가적으로 자바언어가 쓰인다.
Servlet은 자바언어가 주로 쓰이고 부가적으로 HTML이 쓰인다.

따라서
JSP는 눈에 보이는 표현을 잘하기 때문에 HTML 작성에 유용하고
Servlet은 원래 쓰던 자바처럼 DB와의 통신, 논리나 로직을 읽고 확인하는 작업 등을 잘한다.




6. Servlet 생성시 맵핑을 따로 설정해주는 이유
생성한 Servlet에 맵핑을 하게되면 객체로 사용을 못하고 1회성에 그침(Override)


 

7. 이클립스를 통해서 웹페이지 만들기
1) Controler
요청과 응답을 제어하는부분(Servlet)

2) Model
어떤요청 어떤응답을 받을지 방법을 설정한느부분(DAO)

3) View
화면에 어떻게 보일지(JSP)


두 가지 방법!
(1) Model01 => Model + 1(JSP, V+C)
(2) Model02 => (M)odel + 2(JSP(V), Servlet(C)  MVC과정

(Spring을 배운 이후)
Model03(Spring MVC, XML Configuration)
Model04(Spring MVC, Java Class Configuration)
Model05(Spring Boot, Java Class Configuration)
